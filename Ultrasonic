#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "utils/uartstdio.h"

#define TRIG_PORT GPIO_PORTB_BASE
#define TRIG_PIN GPIO_PIN_6
#define ECHO_PORT GPIO_PORTB_BASE
#define ECHO_PIN GPIO_PIN_7

void UART0_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);

    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);
    UARTStdioConfig(0, 9600, 16000000);
}

void delayMicroseconds(uint32_t us) {
    SysCtlDelay((SysCtlClockGet() / (3 * 1000000)) * us);
}

uint32_t measureDistance() {
    // Trigger pulse
    GPIOPinWrite(TRIG_PORT, TRIG_PIN, 0x00);
    delayMicroseconds(2);
    GPIOPinWrite(TRIG_PORT, TRIG_PIN, TRIG_PIN);
    delayMicroseconds(10);
    GPIOPinWrite(TRIG_PORT, TRIG_PIN, 0x00);

    // Wait for echo start
    while(GPIOPinRead(ECHO_PORT, ECHO_PIN) == 0);

    // Timer start
    uint32_t start = SysCtlClockGet();
    while(GPIOPinRead(ECHO_PORT, ECHO_PIN) != 0);

    // Timer stop
    uint32_t end = SysCtlClockGet();

    uint32_t timeDiff = end - start;

    // Convert to microseconds
    float time_us = (float)timeDiff / (SysCtlClockGet() / 1000000);
    float distance_cm = (time_us * 0.0343) / 2;

    return (uint32_t)distance_cm;
}

int main(void) {
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL |
                   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));

    GPIOPinTypeGPIOOutput(TRIG_PORT, TRIG_PIN);
    GPIOPinTypeGPIOInput(ECHO_PORT, ECHO_PIN);

    UART0_Init();

    while(1) {
        uint32_t distance = measureDistance();
        UARTprintf("Distance: %d cm\n", distance);
        SysCtlDelay(SysCtlClockGet() / 3); // 1 sec delay
    }
}
